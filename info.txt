git branch -- список веток
git branch <name> -- создает новую ветку без перехода на нее
git checkout <name> -- переход на другую ветку 
git checkout -b <name> -- создает и переходит на новую ветку
    Начиная с Git версии 2.23, вы можете использовать git switch вместо git checkout, чтобы:
    Переключиться на существующую ветку: git switch testing-branch.
    Создать новую ветку и переключиться на нее: git switch -c new-branch. Флаг -c означает создание, но также можно использовать полный формат:` --create`.
    Вернуться к предыдущей извлечённой ветке: git switch -.
git branch -d <name> -- удаление ветки
git branch --move <oldName> <newName> -- переименование ветки

git add --all = git add . --добавляет все файлы в stage area
git commit -m "<message>" -- коммит из stage area
git commit -am "<message>" -- можно использовать сразу без "git add .", если все измененные файлы отслеживаются Git.
git commit --amend -- вносит изменения в последний коммит
git commit --amend --no-edit --  позволит внести изменения в коммит без изменения комментария к нему. Итоговый коммит заменит неполный коммит. При этом все будет выглядеть так, словно изменения в файлах были сделаны за один коммит.
git log -- история коммитов текущей ветки
git diff -- что изменили, но пока не проиндексировали
git diff --cached -- для просмотра проиндексированных изменений (--staged и --cached синонимы)
git show <commit> -- выводит изменения, внесенные отдельным коммитом
git revert <commit> -- создается новый коммит, применяющий изменения, обратные для указанного аргументом коммита
git rm -- Удаляет файлы с изменениями из рабочей директории и из staging area
git fetch -- Данные из удаленного репозитория попадут в локальный без изменения текущего состояния локальной ветки
git pull -- Данные из удаленного репозитория попадут в локальный измененяя текущее состояние локальной ветки
git restore --staged <file> -- для отмены индексации файла
git restore <file> -- для отмены изменений в файле
git remote -v -- для просмотреть адреса для чтения и записи, привязанные к репозиторию
git cherry-pick <commit> -- взять изменения из другого коммита

